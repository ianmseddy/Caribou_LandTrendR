/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var aoi = ee.FeatureCollection("projects/caribou-landtrendr-354619/assets/Digitized_Caribou_StudyAreas");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//######################################################################################################## 
//#                                                                                                    #\\
//#                           LANDTRENDR GREATEST DISTURBANCE MAPPING                                  #\\
//#                                                                                                    #\\
//########################################################################################################


// date: 2018-10-07
// author: Justin Braaten | jstnbraaten@gmail.com
//         Zhiqiang Yang  | zhiqiang.yang@oregonstate.edu
//         Robert Kennedy | rkennedy@coas.oregonstate.edu
// parameter definitions: https://emapr.github.io/LT-GEE/api.html#getchangemap
// website: https://github.com/eMapR/LT-GEE
// notes: 
//   - you must add the LT-GEE API to your GEE account to run this script. 
//     Visit this URL to add it:
//     https://code.earthengine.google.com/?accept_repo=users/emaprlab/public
//   - use this app to help parameterize: 
//     https://emaprlab.users.earthengine.app/view/lt-gee-change-mapper


//Ian added
//isolate each individual range from Caribou range poly
//first, isolate by province - then Map by DocID - because some polygons were measured in different years.
// it may not matter whether the polygon was disturbed after - since so few are disturbed twice. 

function getCols(tableMetadata) {
  print(tableMetadata.columns);
}

// Fetch collection metadata (`.limit(0)`) and apply the
// previously defined function using `evaluate()`. The printed object is a
// dictionary where keys are column names and values are datatypes.



var startYear = 1984;

//for demos
var PolyFilt = ee.Filter.inList("PolygonID", ["Wittmer15_ColumbiaSouth", "Wittmer15_ColumbiaNorth"]);
var aoiSmall = aoi.filter(PolyFilt);

// filter using a function - we will use this with the map function to run LandTrendr for each study 



//Map.addLayer(aoiSmall, {color:'red'}, "AOI");


/*
function getMetadata(tableMetadata){
`  print(tableMetadata.columns);
}
aoiSmall.limit(0).evaluate(getMetadata);
*/



//var onlyMcLoughlin = aoiSmall.filter(ee.Filter.inList("DocID", [86]));
//print(onlyMcLoughlin);
//print(NewFilt2.size())
//Map.addLayer(onlyMcLoughlin, {color:'green'}, "OnlyMcLoughlin")



//##########################################################################################
// START INPUTS
//##########################################################################################

var exportImg = aoiSmall.map(function(polygon){
  // define collection parameters
  //1984 will always be the start year due to Landsat image availability
  var startYear = 1984;
  //end year will come from publication?
  
  //is startDay relevant
  var startDay = '06-20';
  var endDay = '09-01';

  //retrive metadata from polygon
  var endYear = 2020;


  // define landtrendr parameters
  var runParams = { 
  maxSegments:            6,
  spikeThreshold:         0.9,
  vertexCountOvershoot:   3,
  preventOneYearRecovery: true,
  recoveryThreshold:      0.25,
  pvalThreshold:          0.05,
  bestModelProportion:    0.75,
  minObservationsNeeded:  6
  };

// define change parameters
  var changeParams = {
    delta:  'loss',
    sort:   'greatest',
    year:   {checked:true, start:1986, end:2019},
    mag:    {checked:true, value:200,  operator:'>'},
    dur:    {checked:true, value:4,    operator:'<'},
    preval: {checked:true, value:300,  operator:'>'},
    mmu:    {checked:true, value:11},
    
  };

//##########################################################################################
// END INPUTS
//##########################################################################################

// load the LandTrendr.js module
// var ltgee = require('users/emaprlab/public:Modules/LandTrendr.js'); 
  var ltgee = require('users/ianeddy/Caribou_LandTrendr:Modules/LandTrendr.js'); 
  var index = 'NBR';
  var maskThese = ['cloud', 'shadow', 'snow', 'water'];
  changeParams.index = index;
  
  
  // run landtrendr
  var lt = ltgee.runLT(startYear, endYear, startDay, endDay, aoi = polygon, index, [], runParams, maskThese);
  
  // get the change map layers
  var changeImg = ltgee.getChangeMap(lt, changeParams);
  
  // set visualization dictionaries
  var palette = ['#9400D3', '#4B0082', '#0000FF', '#00FF00', '#FFFF00', '#FF7F00', '#FF0000'];
  var yodVizParms = {
    min: startYear,
    max: endYear,
    palette: palette
  };
  
  var magVizParms = {
    min: 200,
    max: 800,
    palette: palette
  };
  
  // display the change attribute map - note that there are other layers - print changeImg to console to see all
  //Map.centerObject(aoi, 11);
  //Map.addLayer(changeImg.select(['mag']), magVizParms, 'Magnitude of Change');
  //Map.addLayer(changeImg.select(['yod']), yodVizParms, 'Year of Detection');
  
  
  // export change data to google drive
  var gdriveFolder = 'users/ieddy/Caribou_LandTrendr/CaribouResults';
  

  
  var exportImg = changeImg.clip(polygon).unmask(0).short();
  //var exportImg = changeImg.yod;
  
  return(exportImg)

}); 
  //Export the image
  
  //Export.image.toDrive({
  //  image: exportImg, 
  //  description: 'lt-gee_disturbance_map', 
  //  folder: gdriveFolder, 
  //  fileNamePrefix: 'lt-gee_disturbance_map', 
  //  region: aoi, 
  //  scale: 30, 
  //  crs: 'EPSG:5070', 
  //  maxPixels: 1e13
  //});

Export.image.toDrive({
    image: exportImg,
    folder: 'CaribouResults',
    fileNamePrefix: "caribouTest",
    maxPixels: 1e13,
    scale: 30,
    crs: 'EPSG:5070',
    region: aoiSmall
});
  
print(exportImg);






//Map.runFunction(DocIDs, aoi)

