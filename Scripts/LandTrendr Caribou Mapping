/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var aoi = ee.FeatureCollection("projects/caribou-landtrendr-354619/assets/Digitized_Caribou_StudyAreas"),
    caribounames = ee.FeatureCollection("projects/caribou-landtrendr-354619/assets/caribou_SA_csv");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//######################################################################################################## 
//#                                                                                                    #\\
//#                           LANDTRENDR GREATEST DISTURBANCE MAPPING                                  #\\
//#                                                                                                    #\\
//########################################################################################################


// date: 2018-10-07
// author: Justin Braaten | jstnbraaten@gmail.com
//         Zhiqiang Yang  | zhiqiang.yang@oregonstate.edu
//         Robert Kennedy | rkennedy@coas.oregonstate.edu
// parameter definitions: https://emapr.github.io/LT-GEE/api.html#getchangemap
// website: https://github.com/eMapR/LT-GEE
// notes: 
//   - you must add the LT-GEE API to your GEE account to run this script. 
//     Visit this URL to add it:
//     https://code.earthengine.google.com/?accept_repo=users/emaprlab/public
//   - use this app to help parameterize: 
//     https://emaprlab.users.earthengine.app/view/lt-gee-change-mapper


//Ian added
//isolate each individual range from Caribou range poly

//for demos - note the typo in WITTmer
var PolyFilt = ee.Filter.inList("PolygonID", ["WIttmer15_ColumbiaSouth", "Wittmer15_ColumbiaNorth"]);
var aoiSmall = aoi.filter(PolyFilt);

Map.addLayer(aoiSmall, {color:'red'}, "AOI small");
var theData = aoiSmall.toList(2);

var totalPolys = theData.length();
//print(totalPolys)

function getCols(tableMetadata) {
  print(tableMetadata.columns);
}


//this is how to get the polygon ID
var PolygonID = aoiSmall.aggregate_array("PolygonID");
//need a list of 1 to whatever
aoiSmall = aoiSmall.set("PolygonID", PolygonID);
print(aoiSmall);



//var test = aoiSmall.set(PolygonIDdic);
//print(test)

var fcClient = aoiSmall.getInfo();


// Fetch collection metadata (`.limit(0)`) and apply the
// previously defined function using `evaluate()`. The printed object is a
// dictionary where keys are column names and values are datatypes.

// filter using a function - we will use this with the map function to run LandTrendr for each study 


// /*

//##########################################################################################
// START INPUTS
//##########################################################################################

var LandTrendR = function(AOI){
  var aoi = ee.FeatureCollection(AOI);
  var polyID = aoi.get("PolygonID");
  //if this fails try aoi.toDictionary().values())
  
  // define collection parameters
  //1984 will always be the start year due to Landsat image availability
  var startYear = 1984;
  var endYear = 2020;

  //is startDay relevant
  var startDay = '06-20';
  var endDay = '09-01';


  // define landtrendr parameters
  var runParams = { 
  maxSegments:            6,
  spikeThreshold:         0.9,
  vertexCountOvershoot:   3,
  preventOneYearRecovery: true,
  recoveryThreshold:      0.25,
  pvalThreshold:          0.05,
  bestModelProportion:    0.75,
  minObservationsNeeded:  6
  };

// define change parameters
  var changeParams = {
    delta:  'loss',
    sort:   'greatest',
    year:   {checked:true, start:1986, end:2019},
    mag:    {checked:true, value:200,  operator:'>'},
    dur:    {checked:true, value:4,    operator:'<'},
    preval: {checked:true, value:300,  operator:'>'},
    mmu:    {checked:true, value:11},
    
  };

//##########################################################################################
// END INPUTS
//##########################################################################################

// load the LandTrendr.js module
// var ltgee = require('users/emaprlab/public:Modules/LandTrendr.js'); 
  var ltgee = require('users/ianeddy/Caribou_LandTrendr:Modules/LandTrendr.js'); 
  var index = 'NBR';
  var maskThese = ['cloud', 'shadow', 'snow', 'water'];
  changeParams.index = index;


  // run landtrendr
  var lt = ltgee.runLT(startYear, endYear, startDay, endDay, aoi, index, [], runParams, maskThese);
  
  // get the change map layers
  var changeImg = ltgee.getChangeMap(lt, changeParams);
  
  // set visualization dictionaries
  var palette = ['#9400D3', '#4B0082', '#0000FF', '#00FF00', '#FFFF00', '#FF7F00', '#FF0000'];
  var yodVizParms = {
    min: startYear,
    max: endYear,
    palette: palette
  };
  
  var magVizParms = {
    min: 200,
    max: 800,
    palette: palette
  };
  
  // display the change attribute map - note that there are other layers - print changeImg to console to see all
  //Map.centerObject(aoi, 11);
  //Map.addLayer(changeImg.select(['mag']), magVizParms, 'Magnitude of Change');
  //Map.addLayer(changeImg.select(['yod']), yodVizParms, 'Year of Detection');
  
  //var exportImg = changeImg.yod;
  
  var exportImg = changeImg.clip(aoi).unmask(0).short();
  
   //Export the image
  return exportImg;
};

//puyrely for plotting - remove once working
/// moving the plotting outside for now 
var palette = ['#9400D3', '#4B0082', '#0000FF', '#00FF00', '#FFFF00', '#FF7F00', '#FF0000'];
var startYear = 1984;
var endYear = 2020;

var yodVizParms = {
   min: startYear,
   max: endYear,
   palette: palette
  };

var magVizParms = {
  min: 200,
  max: 800,
  palette: palette
  };

//var debug = aoiSmall.map(LandTrendR);  
//print(debug);

var exportImg = aoiSmall
  .map(LandTrendR);
  
print(exportImg);



//var features = ee.FeatureCollection(
//  [ee.Feature(null, {foo: 1}), ee.Feature(null, {foo: 2})]);

// Create an ImageCollection from the FeatureCollection
// by mapping a function over the FeatureCollection.

//this code works but makes a raster with value DocID
//var images = aoiSmall.map(function(feature) {
//  return ee.Image(ee.Number(feature.get('DocID')));
//});
//print(images);
//var exportImg = LandTrendR(test);



var gdriveFolder = 'users/ieddy/Caribou_LandTrendr/CaribouResults';


var PolyIDs = aoiSmall.get("PolygonID");
exportImg.set({
  "tempIndex": ee.Array([0, 1])
  });



//This will never work because you cannot use export in map, apparently
/*



var serverList = ee.List.sequence(0, totalPolys);
  serverList = serverList.map(function(n, fcClient, aoiSmall, exportImg) {
    
    //var index = ee.Number(n);

    
    var Filename = fcClient.features[n].properties.PolygonID;
    var theAoiFilter = ee.Filter.inList("PolygonID", [Filename]);
    var theAoi = aoiSmall.filter(theAoiFilter);
    var theImgFilter = ee.Filter.inList("tempIndex", index);
    var theImage = exportImg.filter(theImgFilter);
    
    
        
    Export.image.toDrive({
      image: theImage, //exportLIst 
      description: 'lt-gee_disturbance_map', 
      folder: gdriveFolder, 
      fileNamePrefix: Filename, 
      region: theAoi, 
      scale: 30, 
      crs: 'EPSG:5070', 
      maxPixels: 1e13
    });
  });


*/

var n = 0;

var imgList = exportImg.toList(totalPolys);

/*

while (n < 2) {

  n++;
  var eeN = ee.Number(n);
  
    var theImgFilter = ee.Filter.inList("tempIndex", eeN);
  var theImage = exportImg.filter(theImgFilter);
   
  
  Export.image.toDrive({
  image: theImage, //exportLIst 
  description: 'lt-gee_disturbance_map', 
  folder: gdriveFolder, 
  fileNamePrefix: Filename, 
  region: theAoi, 
  scale: 30, 
  crs: 'EPSG:5070', 
  maxPixels: 1e13
  });
  
}


imgList.map(function(x, aoiSmall){

  var Filename = x.get("PolygonID");
  var theAoiFilter = ee.Filter.inList("PolygonID", [Filename]);
  var theAoi = aoiSmall.filter(theAoiFilter);
  toExport =
  
  Export.image.toDrive({
  image: x, //exportLIst 
  description: 'lt-gee_disturbance_map', 
  folder: gdriveFolder, 
  fileNamePrefix: Filename, 
  region: theAOI, 
  scale: 30, 
  crs: 'EPSG:5070', 
  maxPixels: 1e13
  });
});
 */

/*
 //once more with the map function
 var exportFunc = function(x, fcClient, aoiSmall) {
  var index = ee.Number(x.get("tempIndex"));
  
  var Filename = fcClient.features[index].properties.PolygonID;
   var theAoiFilter = ee.Filter.inList("PolygonID", [Filename]);
   var theAoi = aoiSmall.filter(theAoiFilter);
  Export.image.toDrive({
   image: x, //exportLIst 
   description: 'lt-gee_disturbance_map', 
   folder: gdriveFolder, 
   fileNamePrefix: Filename, 
   region: theAOI, 
   scale: 30, 
   crs: 'EPSG:5070', 
   maxPixels: 1e13
  });
  
 };
 
exportImg.map(exportFunc, fcClient = fcClient, aoiSmall = aoiSmall);

*/